/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.TrafficControlProcessorRole;

import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Road.Road;
import Business.Sensor.Sensor;
import Business.Supplier.Products.Product;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MaintainenceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
//import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Leandra
 */
public class TrafficControlProcessorWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Enterprise e;
    Organization o;
    UserAccount ua;

    /**
     * Creates new form TrafficControlProcessorWorkAreaJPanel
     */
    public TrafficControlProcessorWorkAreaJPanel(JPanel userProcessContainer, Enterprise e, Organization o, UserAccount ua) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.e = e;
        this.o = o;
        this.ua = ua;
        populateSensorData();
        populateRequestTable();
    }

    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestjTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : ua.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];
            row[0] = request.getMessage();
            row[1] = request.getReceiver();
            row[2] = request.getStatus();
            String result = ((MaintainenceWorkRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SensorDatajTable = new javax.swing.JTable();
        createRoadRequestjButton = new javax.swing.JButton();
        createSensorRequestjButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestjTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel1.setText("Traffic Control Work Area");

        SensorDatajTable.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        SensorDatajTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Road ID", "Road Name", "Road Status", "Sensor ID", "Sensor Type", "Sensor Location", "Sensor Status", "Weather Status", "Traffic Status", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(SensorDatajTable);

        createRoadRequestjButton.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        createRoadRequestjButton.setText("Create Road Request");
        createRoadRequestjButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createRoadRequestjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createRoadRequestjButtonActionPerformed(evt);
            }
        });

        createSensorRequestjButton.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        createSensorRequestjButton.setText("Create Sensor Request");
        createSensorRequestjButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        createSensorRequestjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createSensorRequestjButtonActionPerformed(evt);
            }
        });

        workRequestjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Receiver", "Result", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestjTable);

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Leandra\\Documents\\GitHub\\menezes_leandra_001621189\\menezes_leandra_001621189\\Project\\SmartRoadSensors\\images\\safetyman_small.gif")); // NOI18N
        jLabel2.setText("jLabel2");

        jLabel3.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel3.setText("Sensor Data:");

        jLabel4.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        jLabel4.setText("Work Queue:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jLabel1)
                        .addGap(86, 86, 86)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(createRoadRequestjButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createSensorRequestjButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(252, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(26, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(createRoadRequestjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(createSensorRequestjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createRoadRequestjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createRoadRequestjButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = SensorDatajTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Road road = (Road) SensorDatajTable.getValueAt(selectedRow, 1);
        String sensorLocationId = (String) SensorDatajTable.getValueAt(selectedRow, 5);
        CreateRoadRequestJPanel createRoadRequestJPanel = new CreateRoadRequestJPanel(userProcessContainer, e, road, ua, sensorLocationId);
        userProcessContainer.add("createRoadRequestJPanel", createRoadRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createRoadRequestjButtonActionPerformed

    private void createSensorRequestjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createSensorRequestjButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = SensorDatajTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Road road = (Road) SensorDatajTable.getValueAt(selectedRow, 1);
        String sensorLocationId = (String) SensorDatajTable.getValueAt(selectedRow, 5);
        CreateSensorRequestJPanel createSensorRequestJPanel = new CreateSensorRequestJPanel(userProcessContainer, e, ua, road, sensorLocationId);
        userProcessContainer.add("createSensorRequestJPanel", createSensorRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createSensorRequestjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SensorDatajTable;
    private javax.swing.JButton createRoadRequestjButton;
    private javax.swing.JButton createSensorRequestjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable workRequestjTable;
    // End of variables declaration//GEN-END:variables

    private void populateSensorData() {
        String csvFile = "C:\\Users\\Leandra\\Documents\\GitHub\\menezes_leandra_001621189\\menezes_leandra_001621189\\Project\\SmartRoadSensors\\sensordata.csv";
        BufferedReader br = null;
        String line = "";
        String cvsSplitBy = ",";
        DefaultTableModel dtm = (DefaultTableModel) SensorDatajTable.getModel();
        dtm.setRowCount(0);
        try {
            br = new BufferedReader(new FileReader(csvFile));
            while ((line = br.readLine()) != null) {
                // use comma as separator
                String[] data = line.split(cvsSplitBy);
                Object row[] = new Object[10];
                Sensor sensor = new Sensor();
                sensor.setSensorStreetName(data[0]);
                sensor.setSensorRoadStatus(data[1]);
                sensor.setSensorLocation(data[2]);
                sensor.setSensorStatus(Integer.parseInt(data[3]));
                sensor.setSensorWeatherStatus(data[4]);
                sensor.setSensorTraffic(data[5]);
                sensor.setSensorVerdict(data[6]);
                e.getSensorDataDirectory().getSensorDataList().add(sensor);
                for (Road r : e.getRoadDirectory().getRoadList()) {
                    if (r.getRoadName().equalsIgnoreCase(data[0])) {
                        row[0] = r.getRoadid();
                        row[1] = r;
                        row[2] = data[1];
                        for (Product p : r.getSensorSupplier().getProductCatalog().getProductcatalog()) {
                            if (p.getProdName().equalsIgnoreCase(r.getSensorType().getProdName())) {
                                row[3] = p.getProdId();
                            }
                        }
                        row[4] = r.getSensorType();

                    }
                }
                row[5] = data[2];
                row[6] = data[3];
                row[7] = data[4];
                row[8] = data[5];
                row[9] = data[6];

                dtm.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
