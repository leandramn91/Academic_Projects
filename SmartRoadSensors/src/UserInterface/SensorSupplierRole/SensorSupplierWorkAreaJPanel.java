/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SensorSupplierRole;

import Business.Enterprise.Enterprise;
import Business.Main.EcoSystem;
import Business.Organization.Organization;
import Business.Road.Road;
import Business.Supplier.Products.Product;
import Business.Supplier.Supplier;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MaintainenceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
//import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author Leandra
 */
public class SensorSupplierWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount ua;
    Enterprise e;
    EcoSystem system;
    Supplier s;

    /**
     * Creates new form SensorSupplierWorkAreaJPanel
     */
    public SensorSupplierWorkAreaJPanel(JPanel userProcessContainer, UserAccount ua, Enterprise e, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ua = ua;
        this.e = e;
        this.system = system;
        this.s = findSupplier();
        populateSensorMaintanenceTable();

    }

    public void populateSensorMaintanenceTable() {

        DefaultTableModel model = (DefaultTableModel) sensorSupplierjTable.getModel();
        model.setRowCount(0);
        for (WorkRequest request : ua.getWorkQueue().getWorkRequestList()) {

            Object[] row = new Object[7];
            for (Product p : request.getRoad().getSensorSupplier().getProductCatalog().getProductcatalog()) {
                if (p.getProdName().equalsIgnoreCase(request.getRoad().getSensorType().getProdName())) {
                    row[0] = p.getProdId();
                }
            }
            row[1] = request.getRoad().getSensorType();
            row[2] = request.getRoad();
            row[3] = request;
            String result = ((MaintainenceWorkRequest) request).getTestResult();
            row[4] = result == null ? "Waiting" : result;
            row[5] = request.getStatus();
            //row[6] = request.getSensorData().getSensorLocation();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        sensorSupplierjTable = new javax.swing.JTable();
        sensorSupplierCatalogjButton = new javax.swing.JButton();
        processSensorRequestjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        sensorSupplierjTable.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        sensorSupplierjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sensor ID", "Sensor Type", "Road Name", "Message", "Status", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(sensorSupplierjTable);

        sensorSupplierCatalogjButton.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        sensorSupplierCatalogjButton.setText("Sensor Supplier Catalog");
        sensorSupplierCatalogjButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sensorSupplierCatalogjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sensorSupplierCatalogjButtonActionPerformed(evt);
            }
        });

        processSensorRequestjButton.setFont(new java.awt.Font("Segoe Print", 0, 14)); // NOI18N
        processSensorRequestjButton.setText("Process Sensor Request");
        processSensorRequestjButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        processSensorRequestjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processSensorRequestjButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 36)); // NOI18N
        jLabel1.setText("Sensor Supplier Work Area ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(sensorSupplierCatalogjButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(processSensorRequestjButton))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(140, 140, 140)))
                .addContainerGap(288, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel1)
                .addGap(67, 67, 67)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processSensorRequestjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sensorSupplierCatalogjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sensorSupplierCatalogjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sensorSupplierCatalogjButtonActionPerformed
        // TODO add your handling code here:
        SensorSupplierCatalogJPanel sensorSupplierCatalogJPanel = new SensorSupplierCatalogJPanel(userProcessContainer, s);
        userProcessContainer.add("sensorSupplierCatalogJPanel", sensorSupplierCatalogJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_sensorSupplierCatalogjButtonActionPerformed

    private void processSensorRequestjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processSensorRequestjButtonActionPerformed
        // TODO add your handling code here:
        Road road;
        WorkRequest workRequest;
        String status;
        int selectedRow = sensorSupplierjTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        road = (Road) sensorSupplierjTable.getValueAt(selectedRow, 2);
        workRequest = (WorkRequest) sensorSupplierjTable.getValueAt(selectedRow, 3);
        status = sensorSupplierjTable.getValueAt(selectedRow, 4).toString();
        if (status.equalsIgnoreCase("Processed")) {
            JOptionPane.showMessageDialog(this, "It is already processed", "Warning", JOptionPane.WARNING_MESSAGE);

        } else {

            ProcessSensorRequestJPanel processSensorRequestJPanel = new ProcessSensorRequestJPanel(userProcessContainer, road, ua, e, workRequest);
            userProcessContainer.add("processSensorRequestJPanel", processSensorRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }

    }//GEN-LAST:event_processSensorRequestjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processSensorRequestjButton;
    private javax.swing.JButton sensorSupplierCatalogjButton;
    private javax.swing.JTable sensorSupplierjTable;
    // End of variables declaration//GEN-END:variables

    private Supplier findSupplier() {
        for (Supplier s : e.getSupplierDirectory().getSupplierlist()) {
            if (s.getSupplyName().equalsIgnoreCase(ua.getEmployee().getName())) {
                return s;
            }
        }
        return null;
    }
}
